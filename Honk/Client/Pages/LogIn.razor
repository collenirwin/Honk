@page "/login/{returnUrl?}"
@inject NavigationManager Navigation
@inject IdentityAuthenticationStateProvider AuthStateProvider

<EditForm OnValidSubmit="@OnValidSubmit" Model="@_model">
    <MudCard Style="max-width: 400px;" Class="ml-auto mr-auto mt-10" Outlined="true">
        <MudCardHeader Class="pb-0" style="text-align: center">
            <CardHeaderContent>
                <MudIcon Icon="@Icons.Material.Filled.Person" Style="width: 50px; height: 50px;" />
                <MudText Typo="Typo.h6">Log in to Honk</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <LoadingContainer @bind-Loading="_loading">
                <DataAnnotationsValidator />

                <MudTextField
                    Label="Username or email address" AutoFocus
                    @bind-Value="@_model.UserName" For="(() => _model.UserName)"
                    OnlyValidateIfDirty="true" />

                <MudTextField
                    Label="Password" InputType="InputType.Password"
                    @bind-Value="@_model.Password" For="(() => _model.Password)"
                    OnlyValidateIfDirty="true" />
                <p style="text-align: right">
                    <MudLink Href="/forgotpassword" Typo="Typo.caption">Forgot your password?</MudLink>
                </p>

                @if (_errorMessage is not null)
                {
                    <MudText Color="Color.Error">@_errorMessage</MudText>
                }

            </LoadingContainer>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="mr-auto" Href="/register">
                Create an account
            </MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto"
                       Disabled="@_loading" DisableElevation="true">
                Log in
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private LogInViewModel _model = new();
    private string? _errorMessage;
    private bool _loading = false;

    [Parameter]
    public string? ReturnUrl { get; set; }

    private async Task OnValidSubmit()
    {
        _loading = true;
        _errorMessage = null;

        var logInDto = new LogInDto(UserName: _model.UserName!, Password: _model.Password!);

        try
        {
            await AuthStateProvider.LogInAsync(logInDto);

            // if we've been given a valid return url, go there
            if (ReturnUrl is not null && new Uri(Navigation.BaseUri).IsBaseOf(new Uri(ReturnUrl)))
            {
                Navigation.NavigateTo(ReturnUrl);
            }
            else
            {
                Navigation.NavigateTo(""); // default to the home page
            }

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
