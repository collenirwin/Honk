@page "/register"
@inject NavigationManager Navigation
@inject IdentityAuthenticationStateProvider AuthStateProvider

<EditForm class="card-body form-signin" OnValidSubmit="@OnValidSubmit" Model="@_model">
    <MudCard Style="max-width: 600px;" Class="ml-auto mr-auto mt-10">
        <MudCardHeader Class="pb-0" style="text-align: center">
            <CardHeaderContent>
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Style="width: 50px; height: 50px;" />
                <MudText Typo="Typo.h6">Register for Honk</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <LoadingContainer @bind-Loading="_loading">
                <DataAnnotationsValidator />

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField
                            Label="Email address" AutoFocus
                            @bind-Value="@_model.Email" For="@(() => _model.Email)"
                            OnlyValidateIfDirty="true" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField
                            Label="Username"
                            @bind-Value="@_model.UserName" For="@(() => _model.UserName)"
                            OnlyValidateIfDirty="true" />
                    </MudItem>
                </MudGrid>

                <MudTextField
                    Label="Password" InputType="InputType.Password"
                    @bind-Value="@_model.Password" For="@(() => _model.Password)"
                    OnlyValidateIfDirty="true" />

                <MudTextField
                    Label="Confirm password"
                    @bind-Value="@_model.ConfirmedPassword" For="@(() => _model.ConfirmedPassword)"
                    OnlyValidateIfDirty="true" />

                @if (_errorMessage is not null)
                {
                    <MudText Color="Color.Error">@_errorMessage</MudText>
                }
            </LoadingContainer>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="mr-auto" Href="/login">
                Already have an account
            </MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto"
                       Disabled="@_loading" DisableElevation="true">
                Create account
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private RegisterViewModel _model = new();
    private string? _errorMessage;
    private bool _loading = false;

    private async Task OnValidSubmit()
    {
        _loading = true;
        _errorMessage = null;

        var registerDto = new RegisterDto(
            UserName: _model.UserName!,
            Email: _model.Email!,
            Password: _model.Password!);

        try
        {
            await AuthStateProvider.RegisterAsync(registerDto);
            Navigation.NavigateTo("");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
