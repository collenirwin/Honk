@inject IUserService UserService

<EditForm OnValidSubmit="@OnValidSubmit" Model="@_model" class="card shadow">
    <MudCard Style="max-width: 400px;" Outlined="true">
        <MudCardHeader Class="pb-0" style="text-align: center">
            <CardHeaderContent>
                <MudIcon Icon="@Icons.Material.Filled.Password" Style="width: 50px; height: 50px;" />
                <MudText Typo="Typo.h6">Change password</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <LoadingContainer @bind-Loading="_loading" HtmlClassList="card-body">
                <DataAnnotationsValidator />

                <MudTextField
                    Label="Current password" InputType="InputType.Password"
                    @bind-Value="@_model.OldPassword" For="@(() => _model.OldPassword)"
                    OnlyValidateIfDirty="true" />

                <MudTextField
                    Label="New password" InputType="InputType.Password"
                    @bind-Value="@_model.NewPassword" For="@(() => _model.NewPassword)"
                    OnlyValidateIfDirty="true" />

                @if (_errorMessage is not null)
                {
                    <MudText Color="Color.Error" Class="mt-2">@_errorMessage</MudText>
                }

                @if (_successMessage is not null)
                {
                    <MudText Color="Color.Success" Class="mt-2">@_successMessage</MudText>
                }
            </LoadingContainer>
        </MudCardContent>

        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary"
                       Class="ml-auto mt-3" Disabled="@_loading" DisableElevation="true">
                Change password
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private ChangePasswordViewModel _model = new();
    private string? _errorMessage;
    private string? _successMessage;
    private bool _loading = false;

    private async Task OnValidSubmit()
    {
        _loading = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            var changePasswordDto = new ChangePasswordDto(_model.OldPassword!, _model.NewPassword!);

            await UserService.ChangePasswordAsync(changePasswordDto);

            _successMessage = "Password updated.";
            _model = new();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
