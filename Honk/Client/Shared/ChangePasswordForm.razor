@inject IUserService UserService

<EditForm OnValidSubmit="@OnValidSubmit" Model="@_changePasswordViewModel" class="card shadow">
    <MudText Typo="Typo.h4" Class="mb-3">
        Change password
    </MudText>
    <DataAnnotationsValidator />

    <LoadingContainer @bind-Loading="_loading" HtmlClassList="card-body">

        <MudItem xs="12" sm="6" md="4">
            <MudTextField Label="Current password" InputType="InputType.Password"
                          @bind-Value="@_changePasswordViewModel.OldPassword" For="@(() => _changePasswordViewModel.OldPassword)"
                          OnlyValidateIfDirty="true" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField Label="New password" id="new-password" InputType="InputType.Password"
                          @bind-Value="@_changePasswordViewModel.NewPassword" For="@(() => _changePasswordViewModel.NewPassword)"
                          OnlyValidateIfDirty="true" />
        </MudItem>

        
        @if (_errorMessage is not null)
        {
            <div class="mb-3">
                <label class="text-danger">@_errorMessage</label>
            </div>
        }

        @if (_successMessage is not null)
        {
            <div class="mb-3">
                <label class="text-success">@_successMessage</label>
            </div>
        }
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto mt-3"
                   Disabled="@_loading" DisableElevation="true">
            Change password
        </MudButton>
    </LoadingContainer>
</EditForm>

@code {
    private ChangePasswordViewModel _changePasswordViewModel = new();
    private string? _errorMessage;
    private string? _successMessage;
    private bool _loading = false;

    private async Task OnValidSubmit()
    {
        _loading = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            var changePasswordDto = new ChangePasswordDto(
                _changePasswordViewModel.OldPassword!,
                _changePasswordViewModel.NewPassword!);

            await UserService.ChangePasswordAsync(changePasswordDto);

            _successMessage = "Password updated.";
            _changePasswordViewModel = new();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
