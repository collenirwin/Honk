@inject IUserService UserService

<EditForm OnValidSubmit="@OnValidSubmit" Model="@_changePasswordViewModel" class="card shadow">
    <h4 class="card-header p-3">Change password</h4>

    <DataAnnotationsValidator />

    <LoadingContainer @bind-Loading="_loading" HtmlClassList="card-body">
        <div class="row">
            <div class="col">
                <div class="form-floating mb-3">
                    <InputText type="password" id="old-password" class="form-control form-control-sm"
                               placeholder="Password"
                               @bind-Value="@_changePasswordViewModel.OldPassword" />
                    <label for="old-password">Current password</label>
                    <ValidationMessage For="@(() => _changePasswordViewModel.OldPassword)" />
                </div>
            </div>

            <div class="col">
                <div class="form-floating mb-3">
                    <InputText type="password" id="new-password" class="form-control form-control-sm"
                               placeholder="Password"
                               @bind-Value="@_changePasswordViewModel.NewPassword" />
                    <label for="new-password">New password</label>
                    <ValidationMessage For="@(() => _changePasswordViewModel.NewPassword)" />
                </div>
            </div>
        </div>

        @if (_errorMessage is not null)
        {
            <div class="mb-3">
                <label class="text-danger">@_errorMessage</label>
            </div>
        }

        @if (_successMessage is not null)
        {
            <div class="mb-3">
                <label class="text-success">@_successMessage</label>
            </div>
        }

        <button class="btn btn-primary" type="submit">Change password</button>
    </LoadingContainer>
</EditForm>

@code {
    private ChangePasswordViewModel _changePasswordViewModel = new();
    private string? _errorMessage;
    private string? _successMessage;
    private bool _loading = false;

    private async Task OnValidSubmit()
    {
        _loading = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            var changePasswordDto = new ChangePasswordDto(
                _changePasswordViewModel.OldPassword!,
                _changePasswordViewModel.NewPassword!);

            await UserService.ChangePasswordAsync(changePasswordDto);

            _successMessage = "Password updated.";
            _changePasswordViewModel = new();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
